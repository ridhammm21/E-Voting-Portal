<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-Voting Portal</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.1/ethers.umd.min.js"></script>

    <!-- Swiper CSS -->
    <link href="https://cdn.jsdelivr.net/npm/swiper@10.3.1/swiper-bundle.min.css" rel="stylesheet">
    <!-- CSS -->
    <link rel="stylesheet" href="/css/slider.css">
    <!-- <link rel="stylesheet" href="main.css"> -->
    <style>
        .meta{
        margin-top: 150px;
        display: flex;
        flex-direction: column; 
			align-items: center;
			justify-content: center;
        padding: 10px;
        position: relative;
      }

      .meta .connect{
        display: flex;
        flex-direction: column; 
			align-items: center;
			justify-content: center;
      }

      .meta .container {
			margin-top: 50px;
		}

      .meta button {
			background-color: #4070f4;
			color: white;
			padding: 12px 24px;
			border: none;
			border-radius: 4px;
			cursor: pointer;
			font-size: 16px;
			font-weight: bold;
			/* display: block; */
			margin: 50px auto 0;
      left: 400px;
		}

		.meta button:hover {
			background-color: #3e8e41;
		}

		/* Paragraph styles */
		.meta p {
			text-align: center;
			font-size: 20px;
			/* margin-top: 30px; */
		}


		.meta form {
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			margin-top: 50px;
		}
      

    .meta input[type=text], select {
			width: 110%;
			padding: 12px 20px;
			margin: 8px 0;
			box-sizing: border-box;
			border: 2px solid #ccc;
			border-radius: 4px;
		}
		
      .meta input[type=number], select {
			width: 30%;
			padding: 12px 20px;
			margin: 8px 0;
			box-sizing: border-box;
			border: 2px solid #ccc;
			border-radius: 4px;
		}

		.meta input[type=submit] {
			background-color: #4070f4;
			color: white;
			padding: 12px 20px;
			border: none;
			border-radius: 4px;
			cursor: pointer;
		}
		
		.meta input[type=submit]:hover {
			background-color: #45a049;
		}

    #myTable {
        border-collapse: collapse;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        }

        #myTable th,
        #myTable td {
        border: 1px solid black;
        padding: 8px;
        text-align: center;
        }

        #myTable th {
        background-color: #f2f2f2;
        font-weight: bold;
        }
    </style>
</head>
<body>

    <header>
        <a href="/index.html" class="brand">E-Voting</a>
        <div class="menu-btn"></div>
        <div class="navigation">
            <div class="navigation-items">
                <a href="/indexx">Home</a>
                <a href="/indexx#aboutlink">About</a>
                <a href="#">Portal</a>
                <a href="#">Gallery</a>
                <a href="/indexx#contactlink">Contact us</a>
            </div>
        </div> 
    </header>


    <section class="meta">
      
        <div class="meta-container">Welcome to the Decentralized Voting Application</div>

    <div class="connect">
        <button onclick="connectMetamask()">Connect Metamask</button>
        <p id="metamasknotification"></p>
    </div>

    <div class="meta-container">
        <span>Vote here</span>
        <input type = "number" id ="vote" placeholder="Add Index of the Voter ... ">
        <button onclick="addVote()">Add Vote</button>
        <p id="cand"></p>
        
        <!-- <button onclick="voteStatus()">Check Voting Status</button>
        <p id = "status"></p>
        <p id = "time"></p> -->
    </div>
      </section>

    


    <section class="can">
        <h1>CANDIDATES</h1>
        <div class="slide-container swiper">
            <div class="slide-content">
                <div class="card-wrapper swiper-wrapper">
                </div>
            </div>

            <div class="swiper-button-next swiper-navBtn"></div>
            <div class="swiper-button-prev swiper-navBtn"></div>
            <div class="swiper-pagination"></div>

        </div>
    </section>
    

    <script type="text/javascript">
        const menuBtn = document.querySelector(".menu-btn");
        const navigation = document.querySelector(".navigation");
        menuBtn.addEventListener("click",()=>{
            menuBtn.classList.toggle("active");
            navigation.classList.toggle("active");
        });

        const btns = document.querySelectorAll(".nav-btn");
        const slides = document.querySelectorAll(".video-slide");
        const contents = document.querySelectorAll(".content");

        var slideNav = function(manual)
        {
            btns.forEach((btn)=>{
                btn.classList.remove("active");
            });
            slides.forEach((slide)=>{
                slide.classList.remove("active");
            });
            contents.forEach((content)=>{
                content.classList.remove("active");
            });
            btns[manual].classList.add("active");   
            slides[manual].classList.add("active");   
            contents[manual].classList.add("active");   
        }
        btns.forEach((btn,i)=>{
            btn.addEventListener("click",()=>{
                slideNav(i);
            });
        });

    </script>

    <!-- Swiper JS -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@10.3.1/swiper-bundle.min.js"></script>

    <!-- JavaScript -->
    <script src="slider.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
          fetch("/api/candidatecollection?timestamp=" + Date.now())
            .then((response) => response.json())
            .then((data) => {
              const cardWrapper = document.querySelector(".card-wrapper");
              // Clear existing cards
              cardWrapper.innerHTML = "";
              // Iterate over fetched election data and create cards
              data.forEach((candidatecollection) => {
                const card = document.createElement("div");
                card.className = "card swiper-slide";
                card.innerHTML = `
                        <div class="card swiper-slide">
                            <div class="image-content">
                                <span class="overlay"></span>

                                <div class="card-image">
                                    <img src="img/2.webp" alt="" class="card-img">
                                </div>
                            </div>

                            <div class="card-content">
                                <h2 class="name">${candidatecollection.name}</h2>
                                <p class="description">${candidatecollection.email}</p>
                                <p class="description">${candidatecollection.department}</p>

                                <button class="button">Vote</button>
                            </div>
                        </div>
                      `;
                cardWrapper.appendChild(card);
              });
              // Initialize or update Swiper instance
              if (window.mySwiper) {
                window.mySwiper.update();
              } else {
                window.mySwiper = new Swiper(".slide-container", {
                  slidesPerView: 3,
                  spaceBetween: 25,
                  loop: true,
                  // Add other options as needed
                });
              }
            })
            .catch((error) =>
              console.error("Error fetching election data:", error)
            );
        });
      </script>


<script>
    let WALLET_CONNECTED = "";
let contractAddress = "0x64Fb70a839b23513a752B60866861D1725a441C7";
let contractAbi =  [
  {
    "inputs": [
      {
        "internalType": "string[]",
        "name": "_candidateNames",
        "type": "string[]"
      },
      {
        "internalType": "uint256",
        "name": "_durationInMinutes",
        "type": "uint256"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      }
    ],
    "name": "addCandidate",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "candidates",
    "outputs": [
      {
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "voteCount",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllVotesOfCandiates",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "voteCount",
            "type": "uint256"
          }
        ],
        "internalType": "struct Voting.Candidate[]",
        "name": "",
        "type": "tuple[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getRemainingTime",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getVotingStatus",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_candidateIndex",
        "type": "uint256"
      }
    ],
    "name": "vote",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "voters",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "votingEnd",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "votingStart",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

const connectMetamask = async() => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send("eth_requestAccounts", []);
    const signer = provider.getSigner();
    WALLET_CONNECTED = await signer.getAddress();
    var element = document.getElementById("metamasknotification");
    element.innerHTML = "Metamask is connected " + WALLET_CONNECTED;
}

const addVote = async() => {
    if(WALLET_CONNECTED != 0) {
        var name = document.getElementById("vote");
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner();
        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);
        var cand = document.getElementById("cand");
        cand.innerHTML = "Please wait, adding a vote in the smart contract";
        const tx = await contractInstance.vote(name.value);
        await tx.wait();
        cand.innerHTML = "Vote added !!!";
    }
    else {
        var cand = document.getElementById("cand");
        cand.innerHTML = "Please connect metamask first";
    }
}

const voteStatus = async() => {
    if(WALLET_CONNECTED != 0) {
        var status = document.getElementById("status");
        var remainingTime = document.getElementById("time");
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner();
        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);
        const currentStatus = await contractInstance.getVotingStatus();
        const time = await contractInstance.getRemainingTime();
        console.log(time);
        status.innerHTML = currentStatus == 1 ? "Voting is currently open" : "Voting is finished";
        remainingTime.innerHTML = `Remaining time is ${parseInt(time, 16)} seconds`;
    }
    else {
        var status = document.getElementById("status");
        status.innerHTML = "Please connect metamask first";
    }
}

const getAllCandidates = async() => {
    if(WALLET_CONNECTED != 0) {
        var p3 = document.getElementById("p3");
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner();
        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);
        p3.innerHTML = "Please wait, getting all the candidates from the voting smart contract";
        var candidates = await contractInstance.getAllVotesOfCandiates();
        console.log(candidates);
        var table = document.getElementById("myTable");

        for (let i = 0; i < candidates.length; i++) {
            var row = table.insertRow();
            var idCell = row.insertCell();
            var descCell = row.insertCell();
            var statusCell = row.insertCell();

            idCell.innerHTML = i;
            descCell.innerHTML = candidates[i].name;
            statusCell.innerHTML = candidates[i].voteCount;
        }

        p3.innerHTML = "The tasks are updated"
    }
    else {
        var p3 = document.getElementById("p3");
        p3.innerHTML = "Please connect metamask first";
    }
}
</script>
    
</body>
</html>